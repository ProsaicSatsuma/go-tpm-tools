package server

import (
	"errors"
	"fmt"

	"github.com/google/go-attestation/attest"
	"github.com/google/go-tpm/tpm2"

	tpmpb "github.com/ProsaicSatsuma/go-tpm-tools/proto"

)

// ParseAndVerifyEventLog parses a raw event log and replays the parsed event
// log against the given PCR values. It returns the events verified
// particular PCR indexes/digests and an error if the replay for any PCR
// index does not match the provided value.
//
// It is the caller's responsibility to call server.Verify with those PCRs,
// a trusted public key, and a quote using the private part of the trusted key
// to ensure that the PCRs are generated by a known TPM.
func ParseAndVerifyEventLog(rawEventLog []byte, pcrs *tpmpb.Pcrs) ([]attest.Event, error) {
	attestPcrs, err := convertToAttestPcrs(pcrs)
	if err != nil {
		return nil, fmt.Errorf("received bad PCR proto: %v", err)
	}
	eventLog, err := attest.ParseEventLog(rawEventLog)
	if err != nil {
		return nil, fmt.Errorf("failed to parse event log: %v", err)
	}
	return eventLog.Verify(attestPcrs)
}

func convertToAttestPcrs(pcrProto *tpmpb.Pcrs) ([]attest.PCR, error) {
	if len(pcrProto.GetPcrs()) == 0 {
		return nil, errors.New("no PCRs to convert")
	}
	hash := tpm2.Algorithm(pcrProto.GetHash())
	cryptoHash, err := hash.Hash()
	if err != nil {
		return nil, err
	}

	attestPcrs := make([]attest.PCR, len(pcrProto.GetPcrs()))
	for index, digest := range pcrProto.GetPcrs() {
		attestPcrs = append(attestPcrs, attest.PCR{
			Index:     int(index),
			Digest:    digest,
			DigestAlg: cryptoHash,
		})
	}
	return attestPcrs, nil
}
